// ตัวแปรสำหรับเก็บข้อมูลสภาพอากาศ
let currentWeather = null;
let forecastData = [];
let isLoading = false;
const DEFAULT_CITY = 'กรุงเทพมหานคร';

/**
 * ฟังก์ชันเริ่มต้นเมื่อหน้าเว็บโหลดเสร็จ
 */
function initializeApp() {
    try {
        // ตั้งค่า event listener สำหรับฟอร์มค้นหา
        const searchForm = document.getElementById('searchForm');
        if (searchForm) {
            searchForm.addEventListener('submit', handleSearch);
        }
        
        // ตั้งค่า event listener สำหรับปุ่มค้นหาตำแหน่งปัจจุบัน
        const locationBtn = document.getElementById('locationBtn');
        if (locationBtn) {
            locationBtn.addEventListener('click', searchByLocation);
        }
        
        // ตั้งค่า event listener สำหรับการล้างประวัติการค้นหา
        const clearHistoryBtn = document.getElementById('clearHistoryBtn');
        if (clearHistoryBtn) {
            clearHistoryBtn.addEventListener('click', clearSearchHistory);
        }
        
        // โหลดประวัติการค้นหา
        updateSearchHistoryUI(getSearchHistory());
        
        // โหลดข้อมูลสภาพอากาศเริ่มต้น
        searchWeather(DEFAULT_CITY);
        
        // ตั้งค่า Auto-focus ที่ช่องค้นหา
        const cityInput = document.getElementById('cityInput');
        if (cityInput) {
            cityInput.focus();
        }
    } catch (error) {
        console.error('เกิดข้อผิดพลาดในการเริ่มต้นแอป:', error);
        showError('เกิดข้อผิดพลาดในการเริ่มต้นแอปพลิเคชัน');
    }
}

// เรียกใช้งานเมื่อหน้าเว็บโหลดเสร็จ
document.addEventListener('DOMContentLoaded', initializeApp);

/**
 * ฟังก์ชันจัดการการค้นหา
 */
function handleSearch(event) {
    event.preventDefault();
    
    const cityInput = document.getElementById('cityInput');
    if (!cityInput) return;
    
    const city = cityInput.value.trim();
    if (!city) {
        showNotification('กรุณากรอกชื่อเมือง', 'warning');
        cityInput.focus();
        return;
    }
    
    searchWeather(city);
}

/**
 * ตั้งค่าสถานะการโหลด
 * @param {boolean} isLoading - สถานะการโหลด
 * @param {string} message - ข้อความที่จะแสดงขณะโหลด
 */
function setLoadingState(isLoading, message = 'กำลังโหลด...') {
    const searchBtn = document.getElementById('searchBtn');
    const locationBtn = document.getElementById('locationBtn');
    const loadingIndicator = document.getElementById('loadingIndicator');
    
    // อัปเดตสถานะปุ่ม
    if (searchBtn) {
        searchBtn.disabled = isLoading;
        searchBtn.innerHTML = isLoading 
            ? `<i class="fas fa-spinner fa-spin"></i> ${message}`
            : '<i class="fas fa-search"></i> ค้นหา';
    }
    
    // ปิดการใช้งานปุ่มตำแหน่งปัจจุบันขณะโหลด
    if (locationBtn) {
        locationBtn.disabled = isLoading;
    }
    
    // แสดง/ซ่อนตัวโหลด
    if (loadingIndicator) {
        loadingIndicator.style.display = isLoading ? 'block' : 'none';
        if (isLoading) {
            loadingIndicator.innerHTML = `
                <div class="loading-spinner">
                    <i class="fas fa-sun fa-spin"></i>
                    <p>${message}</p>
                </div>
            `;
        }
    }
}

/**
 * ฟังก์ชันค้นหาข้อมูลสภาพอากาศ
 * @param {string|Event} cityOrEvent - ชื่อเมืองที่จะค้นหาหรือ event object
 */
async function searchWeather(cityOrEvent) {
    // ตรวจสอบว่ามีการโหลดอยู่แล้วหรือไม่
    if (isLoading) return;
    
    let city = '';
    let error = null;
    
    try {
        // ตรวจสอบประเภทของพารามิเตอร์
        if (typeof cityOrEvent === 'string') {
            city = cityOrEvent.trim();
        } else if (cityOrEvent && typeof cityOrEvent === 'object') {
            // ถ้าเป็น event object
            if (cityOrEvent.preventDefault) {
                cityOrEvent.preventDefault();
            }
            const cityInput = document.getElementById('cityInput');
            city = cityInput ? cityInput.value.trim() : '';
        }
        
        // ตรวจสอบว่ามีการกรอกชื่อเมืองหรือไม่
        if (!city) {
            showNotification('กรุณากรอกชื่อเมือง', 'warning');
            const cityInput = document.getElementById('cityInput');
            if (cityInput) cityInput.focus();
            return;
        }
        
        // ตั้งค่าสถานะการโหลด
        isLoading = true;
        setLoadingState(true, `กำลังค้นหาข้อมูลสำหรับ ${city}...`);
        
        // ล้างข้อความผิดพลาด
        const errorDiv = document.getElementById('errorMessage');
        if (errorDiv) errorDiv.classList.add('hidden');
        
        console.log(`กำลังเรียก API สำหรับเมือง: ${city}`);
        
        // เรียก API พร้อม timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 วินาที timeout
        
        const response = await fetch(`/api/weather?city=${encodeURIComponent(city)}`, {
            signal: controller.signal
        }).finally(() => clearTimeout(timeoutId));
        
        if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            console.error('ข้อผิดพลาดจาก API:', errorData);
            throw new Error(errorData.error || `เกิดข้อผิดพลาด HTTP ${response.status}`);
        }
        
        const data = await response.json();
        console.log('ข้อมูลที่ได้รับจาก API:', data);
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        if (!data || !data.main) {
            throw new Error('ไม่พบข้อมูลสภาพอากาศสำหรับเมืองที่ระบุ');
        }
        
        // อัปเดตข้อมูลสภาพอากาศ
        currentWeather = data;
        forecastData = data.forecast || [];
        
        // แสดงผลข้อมูลด้วย animation
        await Promise.all([
            updateCurrentWeather(),
            updateForecast(forecastData)
        ]);
        
        // เพิ่มลงประวัติการค้นหา
        addToSearchHistory(city);
        
        // แจ้งเตือนสำเร็จ
        showNotification(`โหลดข้อมูลสภาพอากาศสำหรับ ${city} เรียบร้อยแล้ว`, 'success');
        
        // แสดงผลส่วนแสดงข้อมูลด้วย animation
        const weatherContainer = document.querySelector('.weather-container');
        if (weatherContainer) {
            weatherContainer.classList.add('animate__animated', 'animate__fadeIn');
            setTimeout(() => {
                weatherContainer.classList.remove('animate__animated', 'animate__fadeIn');
            }, 1000);
        }
        
        // แสดงผลส่วนแสดงข้อมูล
        const currentWeatherEl = document.getElementById('currentWeather');
        if (currentWeatherEl) {
            currentWeatherEl.classList.remove('hidden');
        }
        
    } catch (err) {
        error = err;
        console.error('เกิดข้อผิดพลาดในการค้นหาข้อมูลสภาพอากาศ:', err);
        
        // แสดงข้อความผิดพลาดที่เหมาะสมกับผู้ใช้
        let errorMessage = 'เกิดข้อผิดพลาดในการโหลดข้อมูลสภาพอากาศ';
        
        if (err.name === 'AbortError') {
            errorMessage = 'การเชื่อมต่อใช้เวลานานเกินไป กรุณาลองใหม่อีกครั้ง';
        } else if (err.message.includes('404')) {
            errorMessage = 'ไม่พบข้อมูลสภาพอากาศสำหรับเมืองที่ระบุ';
        } else if (err.message.includes('401')) {
            errorMessage = 'API Key ไม่ถูกต้อง กรุณาตรวจสอบการตั้งค่า';
        } else if (navigator.onLine === false) {
            errorMessage = 'ไม่มีการเชื่อมต่ออินเทอร์เน็ต กรุณาตรวจสอบการเชื่อมต่อของคุณ';
        }
        
        showNotification(errorMessage, 'error');
        
        // แสดงข้อผิดพลาดใน console เฉพาะในโหมดพัฒนา
        if (process.env.NODE_ENV === 'development') {
            console.error('รายละเอียดข้อผิดพลาด:', err);
        }
    } finally {
        // รีเซ็ตสถานะการโหลด
        isLoading = false;
        setLoadingState(false);
        
        // ล้างค่าในช่องค้นหาหากค้นหาสำเร็จ
        if (!error) {
            const cityInput = document.getElementById('cityInput');
    }
}

// ... (rest of the code remains the same)
            throw new Error(data.error);
        }

        // แสดงข้อมูลพยากรณ์อากาศ
        displayForecast(data);
        
    } catch (error) {
        console.error('เกิดข้อผิดพลาดในการโหลดข้อมูลพยากรณ์อากาศ:', error);
        showWarning('ไม่สามารถโหลดข้อมูลพยากรณ์อากาศได้');
    }
}

// ฟังก์ชันแสดงผลข้อมูลพยากรณ์อากาศ
function displayForecast(forecastData) {
    const forecastContainer = document.getElementById('forecast');
    if (!forecastContainer) return;
    
    try {
        // กรองข้อมูลให้เหลือวันละ 1 ชุด (เวลา 12:00 น.)
        const dailyForecasts = forecastData.list.filter((item, index) => {
            return item.dt_txt.includes('12:00:00');
        }).slice(0, 5); // จำกัดเพียง 5 วัน

        let forecastHTML = `
            <div class="forecast-section">
                <h3 class="section-title">
                    <i class="fas fa-calendar-alt"></i>
                    พยากรณ์ 5 วันข้างหน้า
                </h3>
                <div class="forecast-container">
        `;


        dailyForecasts.forEach(day => {
            const date = new Date(day.dt * 1000);
            const dayName = date.toLocaleDateString('th-TH', { weekday: 'long' });
            const formattedDate = date.toLocaleDateString('th-TH', { 
                day: 'numeric', 
                month: 'short' 
            });
            
            const iconUrl = `https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;
            
            forecastHTML += `
                <div class="forecast-card">
                    <div class="forecast-day">${dayName}</div>
                    <div class="forecast-date">${formattedDate}</div>
                    <img src="${iconUrl}" alt="${day.weather[0].description}" class="forecast-icon">
                    <div class="forecast-temp">${Math.round(day.main.temp)}°C</div>
                    <div class="forecast-desc">${day.weather[0].description}</div>
                    <div class="forecast-details">
                        <div class="forecast-detail">
                            <span class="detail-value">${day.main.humidity}%</span>
                            <span class="detail-label">ความชื้น</span>
                        </div>
                        <div class="forecast-detail">
                            <span class="detail-value">${Math.round(day.wind.speed * 3.6)} กม./ชม.</span>
                            <span class="detail-label">ลม</span>
                        </div>
                    </div>
                </div>
            `;
        });

        forecastHTML += `
                </div>
            </div>
        `;

        forecastContainer.innerHTML = forecastHTML;
        
    } catch (error) {
        console.error('เกิดข้อผิดพลาดในการแสดงผลพยากรณ์อากาศ:', error);
        forecastContainer.innerHTML = `
            <div class="text-center py-8 text-gray-500">
                <i class="fas fa-exclamation-triangle text-2xl mb-2"></i>
                <p>ไม่สามารถแสดงข้อมูลพยากรณ์อากาศได้</p>
            </div>
        `;
    }
}

/**
 * ฟังก์ชันอัปเดตข้อมูลสภาพอากาศปัจจุบัน
 * @returns {Promise<void>}
 */
async function updateCurrentWeather() {
    const currentWeatherEl = document.getElementById('currentWeather');
    if (!currentWeatherEl || !currentWeather) return;

    try {
        // กำหนดชื่อเดือนภาษาไทย
        const thaiMonths = [
            'มกราคม', 'กุมภาพันธ์', 'มีนาคม', 'เมษายน', 'พฤษภาคม', 'มิถุนายน',
            'กรกฎาคม', 'สิงหาคม', 'กันยายน', 'ตุลาคม', 'พฤศจิกายน', 'ธันวาคม'
        ];
        
        // ฟังก์ชันแปลงองศาเป็นทิศทาง
        const getWindDirection = (degrees) => {
            const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];
            return directions[Math.round(degrees / 22.5) % 16];
        };

        // ฟังก์ชันแปลงเวลาเป็นรูปแบบที่อ่านง่าย
        const formatTime = (timestamp, timezone) => {
            const date = new Date((timestamp + timezone) * 1000);
            const hours = date.getUTCHours().toString().padStart(2, '0');
            const minutes = date.getUTCMinutes().toString().padStart(2, '0');
            return `${hours}:${minutes} น.`;
        };

        // ฟังก์ชันแสดงไอคอนสภาพอากาศ
        const getWeatherIcon = (iconCode) => {
            const iconMap = {
                '01d': 'sun',
                '01n': 'moon',
                '02d': 'cloud-sun',
                '02n': 'cloud-moon',
                '03d': 'cloud',
                '03n': 'cloud',
                '04d': 'cloud',
                '04n': 'cloud',
                '09d': 'cloud-rain',
                '09n': 'cloud-rain',
                '10d': 'cloud-sun-rain',
                '10n': 'cloud-moon-rain',
                '11d': 'bolt',
                '11n': 'bolt',
                '13d': 'snowflake',
                '13n': 'snowflake',
                '50d': 'smog',
                '50n': 'smog'
            };
            return iconMap[iconCode] || 'question';
        };

        // สร้างวันที่ปัจจุบัน
        const now = new Date();
        const formattedDate = `${now.getDate()} ${thaiMonths[now.getMonth()]} ${now.getFullYear() + 543}`;
        const weatherIcon = getWeatherIcon(currentWeather.weather[0].icon);
        const windDirection = getWindDirection(currentWeather.wind.deg);
        
        // สร้าง HTML สำหรับแสดงผล
        currentWeatherEl.innerHTML = `
            <div class="weather-header">
                <div class="location">
                    <h2><i class="fas fa-map-marker-alt"></i> ${currentWeather.name}, ${currentWeather.sys.country}</h2>
                    <p class="date">${formattedDate}</p>
                </div>
                <div class="weather-main">
                    <div class="temperature">
                        <i class="fas fa-${weatherIcon} weather-icon"></i>
                        <span class="temp-value">${Math.round(currentWeather.main.temp)}</span>
                        <span class="temp-unit">°C</span>
                    </div>
                    <div class="weather-desc">
                        <p class="description">${currentWeather.weather[0].description}</p>
                        <p class="feels-like">รู้สึกเหมือน ${Math.round(currentWeather.main.feels_like)}°C</p>
                    </div>
                </div>
            </div>
            <div class="weather-details">
                <div class="detail-item">
                    <i class="fas fa-temperature-high"></i>
                    <div>
                        <span class="label">อุณหภูมิสูงสุด</span>
                        <span class="value">${Math.round(currentWeather.main.temp_max)}°C</span>
                    </div>
                </div>
                <div class="detail-item">
                    <i class="fas fa-temperature-low"></i>
                    <div>
                        <span class="label">อุณหภูมิต่ำสุด</span>
                        <span class="value">${Math.round(currentWeather.main.temp_min)}°C</span>
                    </div>
                </div>
                <div class="detail-item">
                    <i class="fas fa-tint"></i>
                    <div>
                        <span class="label">ความชื้น</span>
                        <span class="value">${currentWeather.main.humidity}%</span>
                    </div>
                </div>
                <div class="detail-item">
                    <i class="fas fa-wind"></i>
                    <div>
                        <span class="label">ลม</span>
                        <span class="value">${(currentWeather.wind.speed * 3.6).toFixed(1)} km/h ${windDirection}</span>
                    </div>
                </div>
                <div class="detail-item">
                    <i class="fas fa-tachometer-alt"></i>
                    <div>
                        <span class="label">ความกดอากาศ</span>
                        <span class="value">${currentWeather.main.pressure} hPa</span>
                    </div>
                </div>
                <div class="detail-item">
                    <i class="fas fa-eye"></i>
                    <div>
                        <span class="label">การมองเห็น</span>
                        <span class="value">${(currentWeather.visibility / 1000).toFixed(1)} กม.</span>
                    </div>
                </div>
            </div>
            <div class="sun-times">
                <div class="sun-time">
                    <i class="fas fa-sunrise"></i>
                    <span>พระอาทิตย์ขึ้น: ${formatTime(currentWeather.sys.sunrise, currentWeather.timezone)}</span>
                </div>
                <div class="sun-time">
                    <i class="fas fa-sunset"></i>
                    <span>พระอาทิตย์ตก: ${formatTime(currentWeather.sys.sunset, currentWeather.timezone)}</span>
                </div>
            </div>
        `;

        // เพิ่ม animation เมื่อแสดงผล
        currentWeatherEl.classList.add('animate__animated', 'animate__fadeIn');
        setTimeout(() => {
            currentWeatherEl.classList.remove('animate__animated', 'animate__fadeIn');
        }, 1000);

    } catch (error) {
        console.error('เกิดข้อผิดพลาดในการอัปเดตข้อมูลสภาพอากาศปัจจุบัน:', error);
        showNotification('ไม่สามารถอัปเดตข้อมูลสภาพอากาศได้', 'error');
    }
}
        if (!weatherContainer) {
            console.error('ไม่พบ element currentWeather');
            return;
        }
        
        console.log('กำลังอัปเดตข้อมูลสภาพอากาศปัจจุบัน:', currentWeather);
        
        // ตรวจสอบและกำหนดค่าดีฟอลต์ให้กับข้อมูลที่อาจไม่มี
        const weatherData = {
            name: currentWeather.name || 'ไม่ระบุ',
            sys: {
                country: currentWeather.sys?.country || ''
            },
            main: {
                temp: currentWeather.main?.temp || 0,
                feels_like: currentWeather.main?.feels_like || 0,
                humidity: currentWeather.main?.humidity || 0,
                pressure: currentWeather.main?.pressure || 0
            },
            weather: [{
                description: currentWeather.weather[0]?.description || 'ไม่ทราบสภาพอากาศ',
                icon: currentWeather.weather[0]?.icon || '01d'
            }],
            wind: {
                speed: currentWeather.wind?.speed || 0
            },
            visibility: currentWeather.visibility || 0
        };
        
        // แปลงอุณหภูมิให้เป็นจำนวนเต็ม
        const temp = Math.round(weatherData.main.temp);
        const feelsLike = Math.round(weatherData.main.feels_like);
        
        // สร้าง URL ไอคอนสภาพอากาศ (ใช้ https เพื่อความปลอดภัย)
        const iconUrl = `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}@2x.png`;
        
        // ตั้งค่าตัวเลือกการแสดงผลวันที่
        const dateOptions = {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            timeZone: 'Asia/Bangkok'
        };
        
        // จัดรูปแบบวันที่และเวลา
        const formattedDate = now.toLocaleDateString('th-TH', dateOptions);
        const formattedTime = now.toLocaleTimeString('th-TH', { 
            hour: '2-digit', 
            minute: '2-digit',
            timeZone: 'Asia/Bangkok'
        });
        
        // สร้าง HTML สำหรับแสดงข้อมูลสภาพอากาศ
        const weatherHTML = `
            <div class="bg-white rounded-xl shadow-lg p-6 mb-8 max-w-2xl mx-auto">
                <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-4 gap-2">
                    <h2 class="text-2xl font-semibold">${weatherData.name}${weatherData.sys.country ? ', ' + weatherData.sys.country : ''}</h2>
                    <div class="text-gray-500 text-sm whitespace-nowrap">
                        ${formattedDate} ${formattedTime} น.
                    </div>
                </div>
                
                <div class="flex flex-col md:flex-row items-center justify-between gap-6">
                    <div class="flex items-center flex-1">
                        <div class="mr-4">
                            <img 
                                src="${iconUrl}" 
                                alt="${weatherData.weather[0].description}" 
                                class="w-20 h-20"
                                onerror="this.src='https://openweathermap.org/img/wn/01d@2x.png'"
                            >
                        </div>
                        <div>
                            <div class="text-5xl font-bold">${temp}°C</div>
                            <div class="text-gray-600 capitalize">${weatherData.weather[0].description}</div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm w-full md:w-auto">
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <div class="text-gray-500">รู้สึกเหมือน</div>
                            <div class="font-medium">${feelsLike}°C</div>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <div class="text-gray-500">ความชื้น</div>
                            <div class="font-medium">${weatherData.main.humidity}%</div>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <div class="text-gray-500">ลม</div>
                            <div class="font-medium">${weatherData.wind.speed} m/s</div>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <div class="text-gray-500">ความกดอากาศ</div>
                            <div class="font-medium">${weatherData.main.pressure} hPa</div>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg sm:col-span-2">
                            <div class="text-gray-500">ทัศนวิสัย</div>
                            <div class="font-medium">${weatherData.visibility ? (weatherData.visibility / 1000).toFixed(1) + ' km' : 'ไม่ทราบ'}</div>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        // อัปเดต HTML
        weatherContainer.innerHTML = weatherHTML;
        
        // แสดง container
        weatherContainer.classList.remove('hidden');
        
        // อัปเดตข้อมูลพยากรณ์อากาศถ้ามี
        if (currentWeather.forecast && Array.isArray(currentWeather.forecast) && currentWeather.forecast.length > 0) {
            updateForecast(currentWeather.forecast);
        }
    } catch (error) {
        console.error('เกิดข้อผิดพลาดในการอัปเดตข้อมูลสภาพอากาศ:', error);
        showNotification('เกิดข้อผิดพลาดในการโหลดข้อมูลสภาพอากาศ', 'error');
    }
}

// ฟังก์ชันแสดงการแจ้งเตือน
function showNotification(message, type = 'info', duration = 5000) {
    // สร้าง ID สำหรับการแจ้งเตือน
    const notificationId = 'notification-' + Date.now();

    // กำหนดไอคอนตามประเภท
    const icons = {
        success: 'check-circle',
        error: 'exclamation-circle',
        warning: 'exclamation-triangle',
        info: 'info-circle'
    };

    // สร้าง HTML ของการแจ้งเตือน
    const notificationHTML = `
        <div id="${notificationId}" class="notification ${type}">
            <div class="notification-content">
                <div class="notification-icon">
                    <i class="fas fa-${icons[type] || 'info-circle'}"></i>
                </div>
                <div class="notification-message">
                    <p>${message}</p>
                </div>
                <button class="notification-close" aria-label="ปิด">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    `;

    // เพิ่มการแจ้งเตือนลงในหน้าเว็บ
    document.body.insertAdjacentHTML('beforeend', notificationHTML);

    // อ้างอิงไปยังการแจ้งเตือนที่เพิ่งสร้าง
    const notification = document.getElementById(notificationId);

    // เพิ่มคลาสแสดงผลด้วย animation
    setTimeout(() => {
        notification.classList.add('show', 'slide-in');
    }, 10);

    // เพิ่ม event listener สำหรับปุ่มปิด
    const closeBtn = notification.querySelector('.notification-close');
    closeBtn.addEventListener('click', () => {
        closeNotification(notificationId);
    });

    // ปิดการแจ้งเตือนอัตโนมัติหลังจากเวลาที่กำหนด
    if (duration > 0) {
        setTimeout(() => {
            closeNotification(notificationId);
        }, duration);
    }

    // คืนค่า ID สำหรับการอ้างอิงภายหลัง
    return notificationId;
}

// ฟังก์ชันปิดการแจ้งเตือน
function closeNotification(notificationId) {
    const notification = document.getElementById(notificationId);
    if (notification) {
        // เพิ่มคลาสสำหรับ animation ออก
        notification.classList.add('slide-out');
        notification.classList.remove('slide-in');

        // ลบการแจ้งเตือนหลังจาก animation เสร็จสิ้น
        notification.addEventListener('animationend', function handler() {
            notification.removeEventListener('animationend', handler);
            notification.remove();
        });
    }
}

// ฟังก์ชันแสดงผลข้อผิดพลาด (รองรับการใช้งานเดิม)
function showError(message) {
    return showNotification(message, 'error');
}

// ฟังก์ชันแสดงข้อความสำเร็จ
function showSuccess(message) {
    return showNotification(message, 'success');
}

// ฟังก์ชันแสดงคำเตือน
function showWarning(message) {
    return showNotification(message, 'warning');
}

// ฟังก์ชันแสดงข้อมูล
function showInfo(message) {
    return showNotification(message, 'info');
}

// ฟังก์ชันเพิ่มประวัติการค้นหา
function addToSearchHistory(city) {
    if (!city) return;
    
    // รับประวัติการค้นหาจาก localStorage
    let searchHistory = JSON.parse(localStorage.getItem('weatherSearchHistory') || '[]');
    
    // ตรวจสอบว่ามีเมืองนี้ในประวัติแล้วหรือไม่
    const existingIndex = searchHistory.findIndex(item => 
        item.toLowerCase() === city.toLowerCase()
    );
    
    // ถ้ามีอยู่แล้วให้ย้ายไปไว้ด้านบนสุด
    if (existingIndex >= 0) {
        searchHistory.splice(existingIndex, 1);
    }
    
    // เพิ่มเมืองใหม่ที่ค้นหา
    searchHistory.unshift(city);
    
    // จำกัดจำนวนประวัติให้ไม่เกิน 10 รายการ
    if (searchHistory.length > 10) {
        searchHistory = searchHistory.slice(0, 10);
    }
    
    // บันทึกลงใน localStorage
    localStorage.setItem('weatherSearchHistory', JSON.stringify(searchHistory));
    
    // อัปเดตแสดงผลประวัติการค้นหา
    updateSearchHistoryUI(searchHistory);
}

// ฟังก์ชันอัปเดตแสดงผลประวัติการค้นหา
function updateSearchHistoryUI(history) {
    const historyContainer = document.getElementById('searchHistory');
    if (!historyContainer) return;
    
    if (!history || history.length === 0) {
        historyContainer.innerHTML = '<p class="text-gray-500 text-sm">ยังไม่มีประวัติการค้นหา</p>';
        return;
    }
    
    const historyHTML = `
        <h3 class="font-semibold text-gray-700 mb-2">ประวัติการค้นหา</h3>
        <ul class="space-y-1">
            ${history.map(city => `
                <li>
                    <button 
                        class="w-full text-left px-3 py-1 text-sm text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                        onclick="document.getElementById('cityInput').value = '${city}'; searchWeather(event)"
                    >
                        <i class="fas fa-history mr-2"></i>${city}
                    </button>
                </li>
            `).join('')}
        </ul>
        <button 
            onclick="clearSearchHistory()" 
            class="mt-2 text-xs text-red-500 hover:text-red-700"
        >
            <i class="fas fa-trash-alt mr-1"></i>ลบประวัติทั้งหมด
        </button>
    `;
    
    historyContainer.innerHTML = historyHTML;
}

// ฟังก์ชันลบประวัติการค้นหาทั้งหมด
function clearSearchHistory() {
    if (confirm('ยืนยันการลบประวัติการค้นหาทั้งหมด?')) {
        localStorage.removeItem('weatherSearchHistory');
        updateSearchHistoryUI([]);
    }
}

// ฟังก์ชันค้นหาตำแหน่งปัจจุบัน
function searchByLocation() {
    // แสดงการแจ้งเตือนการโหลด
    const loadingId = showNotification('กำลังค้นหาตำแหน่งปัจจุบัน...', 'info', 0);
    
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            async (position) => {
                try {
                    closeNotification(loadingId);
                    const loadingWeatherId = showNotification('กำลังโหลดข้อมูลสภาพอากาศ...', 'info', 0);
                    
                    const { latitude, longitude } = position.coords;
                    
                    try {
                        // เรียก API เพื่อแปลงพิกัดเป็นชื่อเมือง (Reverse Geocoding)
                        const response = await fetch(`/reverse-geocode?lat=${latitude}&lon=${longitude}`);
                        
                        if (!response.ok) {
                            throw new Error('ไม่สามารถระบุตำแหน่งได้');
                        }
                        
                        const locationData = await response.json();
                        const cityName = locationData.name || `${locationData[0]?.name}, ${locationData[0]?.country}`;
                        
                        if (!cityName) {
                            throw new Error('ไม่พบชื่อเมืองสำหรับตำแหน่งนี้');
                        }
                        
                        // อัพเดตช่องค้นหา
                        const searchInput = document.getElementById('cityInput');
                        if (searchInput) {
                            searchInput.value = cityName;
                        }
                        
                        // ค้นหาข้อมูลสภาพอากาศด้วยชื่อเมือง
                        await getWeather(cityName);
                        
                        // แสดงข้อความสำเร็จ
                        showSuccess('ค้นหาตำแหน่งปัจจุบันเรียบร้อย');
                        
                    } catch (error) {
                        console.error('Error getting location:', error);
                        showError(error.message || 'ไม่สามารถระบุตำแหน่งได้');
                    } finally {
                        closeNotification(loadingWeatherId);
                    }
                    
                } catch (error) {
                    console.error('Error in location search:', error);
                    showError('เกิดข้อผิดพลาดในการค้นหาตำแหน่ง');
                }
            },
            (error) => {
                closeNotification(loadingId);
                console.error('Geolocation error:', error);
                let errorMessage = 'ไม่สามารถเข้าถึงตำแหน่งปัจจุบันได้';
                
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = 'ปฏิเสธการเข้าถึงตำแหน่ง กรุณาอนุญาตการเข้าถึงตำแหน่ง';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = 'ไม่สามารถระบุตำแหน่งได้ในขณะนี้';
                        break;
                    case error.TIMEOUT:
                        errorMessage = 'การขอตำแหน่งใช้เวลานานเกินไป';
                        break;
                }
                
                showError(errorMessage);
                
                // แสดงคำแนะนำการแก้ไข
                if (error.code === error.PERMISSION_DENIED) {
                    showNotification('กรุณาอนุญาตการเข้าถึงตำแหน่งในหน้าต่างที่ปรากฏ หรือลองค้นหาด้วยชื่อเมืองแทน', 'info');
                }
            },
            {
                enableHighAccuracy: true,
                timeout: 10000,
                maximumAge: 0
            }
        );
    } else {
        closeNotification(loadingId);
        showError('เบราว์เซอร์นี้ไม่รองรับการระบุตำแหน่ง');
    }
}
// ฟังก์ชันอัปเดตข้อมูลพยากรณ์อากาศ 5 วัน
function updateForecast(forecastData) {
    const forecastContainer = document.getElementById('forecast');
    if (!forecastContainer) {
        console.error('ไม่พบ element forecast container');
        return;
    }
    
    // ล้างข้อมูลเก่า
    forecastContainer.innerHTML = '';
    
    if (!forecastData || forecastData.length === 0) {
        forecastContainer.innerHTML = `
            <div class="col-span-full text-center py-4 text-gray-500">
                ไม่พบข้อมูลพยากรณ์อากาศ
            </div>
        `;
        return;
    }
    
    console.log('กำลังอัปเดตข้อมูลพยากรณ์อากาศ:', forecastData);
    
    // สร้าง container สำหรับการ์ดพยากรณ์อากาศ
    const forecastGrid = document.createElement('div');
    forecastGrid.className = 'grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4 mt-6';
    
    // กรองข้อมูลให้เหลือแค่วันละ 1 รายการ (เวลา 12:00 น.)
    const dailyForecast = [];
    const processedDays = new Set();
    
    // ตรวจสอบว่า forecastData เป็น array หรือไม่
    const forecastItems = Array.isArray(forecastData) ? forecastData : [];
    
    forecastItems.forEach(day => {
        if (!day || !day.dt) return;
        
        const date = new Date(day.dt * 1000);
        const dateString = date.toLocaleDateString('th-TH');
        
        // เพิ่มเฉพาะข้อมูลของวันถัดไป (ข้ามวันปัจจุบัน)
        if (!processedDays.has(dateString) && processedDays.size < 5) {
            dailyForecast.push(day);
            processedDays.add(dateString);
        }
    });
    
    // สร้างการ์ดพยากรณ์อากาศสำหรับแต่ละวัน
    dailyForecast.forEach(day => {
        if (!day.weather || !day.weather[0] || !day.main || !day.wind) return;
        
        const date = new Date(day.dt * 1000);
        const dayName = date.toLocaleDateString('th-TH', { weekday: 'short' });
        const dayNum = date.getDate();
        const month = date.getMonth() + 1;
        const iconCode = day.weather[0].icon || '01d';
        const iconUrl = `https://openweathermap.org/img/wn/${iconCode}@2x.png`;
        
        const forecastCard = document.createElement('div');
        forecastCard.className = 'bg-white rounded-xl shadow-md p-4 text-center hover:shadow-lg transition-transform transform hover:-translate-y-1';
        
        // สร้างข้อมูลที่จะแสดงในการ์ด
        const weatherInfo = `
            <div class="font-semibold text-gray-700">${dayName} ${dayNum}/${month}</div>
            <img src="${iconUrl}" alt="${day.weather[0].description || 'สภาพอากาศ'}" class="mx-auto w-16 h-16 my-2" onerror="this.src='https://openweathermap.org/img/wn/01d@2x.png'">
            <div class="text-2xl font-bold text-gray-800">${Math.round(day.main.temp || 0)}°C</div>
            <div class="text-sm text-gray-600 capitalize mb-2">${(day.weather[0].description || '').toLowerCase()}</div>
            <div class="flex justify-between text-xs text-gray-500">
                <span class="text-red-500">สูง ${Math.round(day.main.temp_max || 0)}°</span>
                <span class="text-blue-500">ต่ำ ${Math.round(day.main.temp_min || 0)}°</span>
            </div>
            <div class="mt-2 text-xs text-gray-500">
                <div>ความชื้น: ${day.main.humidity || 0}%</div>
                <div>ลม: ${day.wind.speed || 0} m/s</div>
            </div>
        `;
        
        forecastCard.innerHTML = weatherInfo;
        forecastGrid.appendChild(forecastCard);
    });
    
    // เพิ่ม grid เข้าไปใน container
    forecastContainer.appendChild(forecastGrid);
    forecastContainer.classList.remove('hidden');
}
